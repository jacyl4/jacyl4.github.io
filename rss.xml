<?xml version="1.0" encoding="utf-8"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>de_GWD</title><link>https://jacyl4.github.io/</link><description>MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</description><generator>Hugo 0.69.0 https://gohugo.io/</generator><language>zh-CN</language><managingEditor>jacyl4@gmail.com (JacyL4)</managingEditor><webMaster>jacyl4@gmail.com (JacyL4)</webMaster><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><lastBuildDate>Wed, 22 Apr 2020 02:06:57 +0000</lastBuildDate><atom:link rel="self" type="application/rss+xml" href="https://jacyl4.github.io/rss.xml"/><item><title>RouterOS电信移动聚合实例</title><link>https://jacyl4.github.io/posts/ros_ct_cmcc/</link><guid isPermaLink="true">https://jacyl4.github.io/posts/ros_ct_cmcc/</guid><pubDate>Wed, 22 Apr 2020 09:42:37 +0800</pubDate><author>jacyl4@gmail.com (JacyL4)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description><![CDATA[<p>实例宽带接入：</p>
<p>电信（双拨）</p>
<p>移动</p>
<h1 id="一建立vrrp用于拨号">一，建立vrrp用于拨号</h1>
<p>提前摸清ros里的网口顺序，实例中，电信插eth1口，移动插eth2口，桥接接口名为bridge1，给bridge1分配个ip，比如10.0.0.2，就是ros地址。</p>
<pre><code>/interface vrrp add name=vrrp1 interface=eth1 vrid=1
/interface vrrp add name=vrrp2 interface=eth1 vrid=2
/interface vrrp add name=vrrp4 interface=eth2 vrid=3
</code></pre><p>给端口们预先分配好ip，随自己的习惯分配好了，因为vrrp需要预设好ip才会显示已连接</p>
<pre><code>/ip address add address=192.168.10.1/24 interface=eth1
/ip address add address=192.168.20.1/24 interface=eth2
/ip address add address=192.168.10.11/24 interface=vrrp1
/ip address add address=192.168.10.12/24 interface=vrrp2
/ip address add address=192.168.20.11/24 interface=vrrp3
</code></pre><h1 id="二建立pppoe拨号">二，建立pppoe拨号</h1>
<pre><code>/interface pppoe-client add name=pppoe-CT1 max-mtu=1480 max-mru=1480 interface=vrrp1 user=宽带帐号 password=宽带密码 add-default-route=no disable=no
/interface pppoe-client add name=pppoe-CT2 max-mtu=1480 max-mru=1480 interface=vrrp2 user=宽带帐号 password=宽带密码 add-default-route=no disable=no
/interface pppoe-client add name=pppoe-CMCC1 max-mtu=1480 max-mru=1480 interface=vrrp3 user=宽带帐号 password=宽带密码 add-default-route=no disable=no
</code></pre><h1 id="三防火墙基础防护">三，防火墙基础防护</h1>
<p>下面第五行&quot;src-address=10.0.0.0/24&quot;，这个是我内网的网段，表示该ip段可以连入ros，进行设置。根据自己情况改。</p>
<pre><code>/ip firewall filter
add chain=input connection-state=invalid action=drop comment=&quot;Drop Invalid connections&quot;  
add chain=input connection-state=established action=accept comment=&quot;Allow Established connections&quot;  
add chain=input protocol=icmp action=accept comment=&quot;Allow ICMP&quot;  
add chain=input src-address=10.0.0.0/24 action=accept in-interface=bridge1
add chain=input action=drop comment=&quot;Drop everything else&quot;

add chain=output action=accept comment=&quot;accept everything&quot;

add chain=forward connection-state=invalid action=drop comment=&quot;Drop Invalid connections&quot;
add chain=forward connection-state=established action=accept comment=&quot;Allow Established connections&quot;
add chain=forward connection-state=related action=accept comment=&quot;allow related connections&quot;

add chain=forward protocol=tcp action=jump jump-target=tcp
add chain=forward protocol=udp action=jump jump-target=udp
add chain=forward protocol=icmp action=jump jump-target=icmp
</code></pre><h1 id="四建立nat伪装与端口映射">四，建立nat伪装与端口映射</h1>
<pre><code>/ip firewall nat
add chain=srcnat out-interface=pppoe-CT1 action=masquerade
add chain=srcnat out-interface=pppoe-CT2 action=masquerade
add chain=srcnat out-interface=pppoe-CMCC1 action=masquerade

add chain=dstnat protocol=tcp dst-port=1-65535 in-interface=pppoe-CT1 action=dst-nat to-addresses=10.0.0.5 to-ports=1-65535
</code></pre><h1 id="五pcc宽带聚合">五，PCC宽带聚合</h1>
<h2 id="0导入国内运营商ip段">0，导入国内运营商ip段</h2>
<p>下载文件 <a href="https://raw.githubusercontent.com/jacyl4/ros-pbr-CT-CMCC/master/ros-dpbr-CT-CMCC.rsc">ros-dpbr-CT-CMCC.rsc</a></p>
<p>导入winbox的Files里</p>
<p>运行如下，把ip段导入ros firewall的address lists里，供下面标记时使用。（防止重复导入，前两行是删除现有的电信段与移动段）</p>
<pre><code>/ip firewall address-list remove [find list=&quot;dpbr-CT&quot;]
/ip firewall address-list remove [find list=&quot;dpbr-CMCC&quot;]
/import ros-dpbr-CT-CMCC.rsc
</code></pre><h2 id="1排除内网通讯">1，排除内网通讯</h2>
<pre><code>/ip firewall address-list
add address=10.0.0.0/24 list=local comment=local

/ip firewall mangle
add chain=prerouting src-address-list=local dst-address-list=local action=accept comment=&quot;local&quot;
</code></pre><h2 id="2源进标记">2，源进标记</h2>
<pre><code>/ip firewall mangle
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CT1 src-address-list=dpbr-CT action=mark-connection new-connection-mark=CT_conn1 passthrough=yes comment=in
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CT2 src-address-list=dpbr-CT action=mark-connection new-connection-mark=CT_conn2 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CMCC1 src-address-list=dpbr-CMCC action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CT1 action=mark-connection new-connection-mark=CT_conn1 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CT2 action=mark-connection new-connection-mark=CT_conn2 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CMCC1 action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
</code></pre><h2 id="3v2线路标记可选">3，v2线路标记（可选）</h2>
<p>示例：</p>
<p>111.111.111.111是搬瓦工vps ip，注释名称bwg，走电信线路</p>
<p>222.222.222.222是CloudCone vps ip，注释名称cc，走移动线路</p>
<pre><code>/ip firewall address-list
add address=111.111.111.111 list=CTv2 comment=bwg
add address=222.222.222.222 list=CMv2 comment=cc
</code></pre><pre><code>/ip firewall mangle
add chain=prerouting connection-mark=no-mark in-interface=bridge1 dst-address-type=!local dst-address-list=CTv2 action=mark-connection new-connection-mark=CT_conn1 passthrough=yes comment=v2
add chain=prerouting connection-mark=no-mark in-interface=bridge1 dst-address-type=!local dst-address-list=CMv2 action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
</code></pre><h2 id="4pcc标记">4，PCC标记</h2>
<p>先做国内不周运营商指定出口，因为电信双拨，双拨的还得PCC聚合下，至于叠不叠带宽，各地随缘了。移动就单拨就直接标记一下就行了。</p>
<pre><code>/ip firewall mangle
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses:2/0 dst-address-list=dpbr-CT dst-address-type=!local action=mark-connection new-connection-mark=CT_conn1 passthrough=yes comment=PCC
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses:2/1 dst-address-list=dpbr-CT dst-address-type=!local action=mark-connection new-connection-mark=CT_conn1 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=bridge1 dst-address-list=dpbr-CMCC dst-address-type=!local action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
</code></pre><p>ros防火墙规则自上而下顺序匹配，上面没匹配到的，就接下来整体聚合。</p>
<pre><code>/ip firewall mangle
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses:3/0 dst-address-type=!local action=mark-connection new-connection-mark=CT_conn1 passthrough=yes comment=PCC
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses:3/1 dst-address-type=!local action=mark-connection new-connection-mark=CT_conn2 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses:3/2 dst-address-type=!local action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
</code></pre><h2 id="5让数据根据上面线路标记选择路由">5，让数据根据上面线路标记选择路由</h2>
<pre><code>/ip firewall mangle
add chain=prerouting connection-mark=CT_conn1 in-interface=bridge1 action=mark-routing new-routing-mark=CT1 passthrough=yes comment=&quot;dynamic pbr&quot;
add chain=prerouting connection-mark=CT_conn2 in-interface=bridge1 action=mark-routing new-routing-mark=CT2 passthrough=yes
add chain=prerouting connection-mark=CMCC_conn1 in-interface=bridge1 action=mark-routing new-routing-mark=CMCC1 passthrough=yes

add chain=output connection-mark=CT_conn1 action=mark-routing new-routing-mark=CT1 passthrough=yes comment=out
add chain=output connection-mark=CT_conn2 action=mark-routing new-routing-mark=CT2 passthrough=yes
add chain=output connection-mark=CMCC_conn1 action=mark-routing new-routing-mark=CMCC1 passthrough=yes
</code></pre><h1 id="六设置路由">六，设置路由</h1>
<pre><code>/ip route
add dst-address=0.0.0.0/0 gateway=pppoe-CT1 check-gateway=ping distance=1
add dst-address=0.0.0.0/0 gateway=pppoe-CT2 check-gateway=ping distance=1
add dst-address=0.0.0.0/0 gateway=pppoe-CMCC1 check-gateway=ping distance=2
add dst-address=0.0.0.0/0 gateway=pppoe-CT1 check-gateway=ping distance=1 routing-mark=CT1
add dst-address=0.0.0.0/0 gateway=pppoe-CT2 check-gateway=ping distance=1 routing-mark=CT2
add dst-address=0.0.0.0/0 gateway=pppoe-CMCC1 check-gateway=ping distance=1 routing-mark=CMCC1
</code></pre><h1 id="乖巧">乖巧</h1>
<p><img src="https://i.loli.net/2020/04/22/EaMjS1J8yfrVv4N.png" alt="给个赏吧"></p>
]]></description></item><item><title>de_GWD</title><link>https://jacyl4.github.io/posts/de_gwd/</link><guid isPermaLink="true">https://jacyl4.github.io/posts/de_gwd/</guid><pubDate>Tue, 26 Mar 2019 00:00:00 +0000</pubDate><author>jacyl4@gmail.com (JacyL4)</author><copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright><description><![CDATA[<p><a href="https://github.com/jacyl4/de_GWD">Github</a></p>
<p>de_GWD(Debian Gateway&amp;DNS)专注旁路，运行于debian的一个完善套件，带界面，纯粹是为了追求更高效更极速，可以说一骑绝尘。</p>
<p>DNS去污染方式有别于以往各种，效率不是以往LEDE/梅林等兼容方案能比拟的。</p>
<p>需要64位，支持普通amd64平台 以及 树莓派，香橙派 等 arm64 平台。</p>
<p><img src="https://i.loli.net/2020/02/26/Sk7awvCJTLsUh8D.png" alt="de_GWD"></p>
<h1 id="部署">部署</h1>
<p>提前给自己的vps kvm 小机 准备好域名。哪怕是免费的只要能给cloudflare托管就行。二级域名不行。 脚本开始安装的时候，要制作证书的。</p>
<p><img src="https://i.loli.net/2019/04/04/5ca5beea00c91.png" alt="dns record"></p>
<h2 id="服务端">服务端</h2>
<p><img src="https://i.loli.net/2020/02/23/EZldb3zPtgKGprX.png" alt="server"></p>
<p>ssh登录vps</p>
<pre><code>apt install -y wget
bash &lt;(wget --no-check-certificate -qO- https://raw.githubusercontent.com/jacyl4/de_GWD/master/server)
</code></pre><p>直接输出上面做好a记录的自己的域名。期间会自动生成uuid跟path。
脚本结束会打印出uuid跟path。</p>
<p>附：
<a href="https://www.uuidgenerator.net/">在线生成UUID</a></p>
<h2 id="客户端">客户端</h2>
<p><img src="https://i.loli.net/2020/02/22/5L3go4kPVSmrTID.png" alt="client"></p>
<p><img src="https://i.loli.net/2020/02/23/6Qb3zBlR5WoPTAe.png" alt="client_do"></p>
<p>Compatible Edition (amd64&amp;arm64)</p>
<pre><code>apt install -y wget
bash &lt;(wget --no-check-certificate -qO- http://xznat.seso.icu:10290/client)
</code></pre><p>General Edition (amd64)</p>
<pre><code>apt install -y wget
bash &lt;(wget --no-check-certificate -qO- http://xznat.seso.icu:10290/client_do)
</code></pre><p>通常用第二个脚本，如果是armbian平台的话，才选第一个脚本。</p>
<p>首次安装前，先维持上级路由的dhcp是普通状态，确保debian能正常获取ip联网。</p>
<p>直接联网安装，不需要挂代理。</p>
<p>选项2，可以用来强制重置pihole密码。</p>
<p>装完后，关闭上级路由的DHCP服务，在web UI上开启de_GWD的DHCP服务。</p>
<p>有公网ip的话，可以选项8安装wireguard组件。</p>
<ul>
<li>
<p>自动每四小时校时</p>
</li>
<li>
<p>自动每天凌晨更新分流规则</p>
</li>
</ul>
<p>更细致的疑问，<a href="https://t.me/de_GWD">电报群</a>联系吧</p>
]]></description></item></channel></rss>