<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN"><title type="text">de_GWD</title><subtitle type="html">路由</subtitle><updated>2020-07-05T02:44:43+00:00</updated><id>https://jacyl4.github.io/</id><link rel="alternate" type="text/html" href="https://jacyl4.github.io/"/><link rel="self" type="application/atom+xml" href="https://jacyl4.github.io/atom.xml"/><author><name>JacyL4</name><uri>https://jacyl4.github.io/</uri><email>jacyl4@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><generator uri="https://gohugo.io/" version="0.73.0">Hugo</generator><entry><title type="text">Jellyfin 影库 JAV 刮削</title><link rel="alternate" type="text/html" href="https://jacyl4.github.io/posts/jellyfin_jav_capture_scraper/"/><id>https://jacyl4.github.io/posts/jellyfin_jav_capture_scraper/</id><updated>2020-07-05T10:44:19+08:00</updated><published>2020-06-28T00:00:00+08:00</published><author><name>JacyL4</name><uri>https://seso.icu/</uri><email>jacyl4@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">环境准备 预先规划好IP地址 NAS IP: 10.0.0.4 Jellyfin IP: 10.0.0.6 我JAV的文件在群晖的 /volume1/Transmission/JAV 文件夹下 在 PVE 上， 新建个 debian 的 lxc 容器 新建lxc容器的时候，Unprivileged container: 不需要勾选 运行容器前，点击 即将要安装 Jellyfin 的容器， options， 编辑最后一个选项 Features ，勾上NFS。 登录……</summary><content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/28/wbysakCxvQHLnIe.jpg" alt="gallery1.jpg"></p>
<h4 id="环境准备">环境准备</h4>
<p>预先规划好IP地址 <br>
NAS IP: 10.0.0.4 <br>
Jellyfin IP: 10.0.0.6</p>
<p>我JAV的文件在群晖的 <code>/volume1/Transmission/JAV</code> 文件夹下</p>
<p>在 PVE 上， 新建个 debian 的 lxc 容器 <br>
新建lxc容器的时候，Unprivileged container: 不需要勾选</p>
<p>运行容器前，点击 即将要安装 Jellyfin 的容器， options， 编辑最后一个选项 Features ，勾上NFS。</p>
<h4 id="登录群晖开启群晖的nfs共享">登录群晖，开启群晖的nfs共享。</h4>
<p>控制面板--文件服务， 最底下， NFS</p>
<img src="https://i.loli.net/2020/06/28/6ytReTVlPpmi5Jo.png" width="450">
<p>控制面板--共享文件夹， 编辑共享文件夹， NFS权限 选项卡，</p>
<img src="https://i.loli.net/2020/06/28/pAtg6UMTGFSfjXP.png" width="450">
<h2 id="搭建jellyfin">搭建Jellyfin</h2>
<h4 id="通过nfs连接nas存储">通过nfs连接nas存储</h4>
<p>ssh登录jellyfin所在的 pve lxc debian 容器，把群晖里的Transmission文件夹挂载到 pve lxc debian容器的 <code>/anas</code></p>
<pre><code>mkdir -p /anas
cat &lt;&lt; EOF &gt;/etc/fstab
# UNCONFIGURED FSTAB FOR BASE SYSTEM
10.0.0.4:/volume1/Transmission /anas nfs nfsvers=3,hard,timeo=600,retrans=2,noatime,nodiratime,_netdev 0 0
EOF

reboot
</code></pre><h4 id="apt安装jellyfin">APT安装Jellyfin</h4>
<pre><code>apt install apt-transport-https gnupg2
wget -O - https://repo.jellyfin.org/debian/jellyfin_team.gpg.key | apt-key add -
echo &quot;deb [arch=$(dpkg --print-architecture)] https://repo.jellyfin.org/debian $(cat /etc/os-release | grep VERSION= | cut -d'(' -f2 | cut -d')' -f1) main&quot; &gt; /etc/apt/sources.list.d/jellyfin.list

apt update
apt install jellyfin

usermod -aG postfix jellyfin 
systemctl restart jellyfin
</code></pre><p>至此，已经可以用 Jellyfin IP: <code>10.0.0.6:8096</code> 通过浏览器来访问jellyfin了。</p>
<h4 id="通过-av_data_capture-分类整理-jav-文件夹">通过 AV_Data_Capture 分类整理 JAV 文件夹</h4>
<p><a href="https://github.com/yoshiko2/AV_Data_Capture/releases">https://github.com/yoshiko2/AV_Data_Capture/releases</a></p>
<p>就两个文件需要用的。AV_Data_Capture和config.ini <br>
登录pve lxc debian jellyfin, 进入挂载过的JAV文件夹，放入这两个文件</p>
<p>编辑config.ini</p>
<pre><code>[common]
main_mode=2
failed_output_folder=failed
success_output_folder=JAV_output
soft_link=0

[proxy]
;proxytype: http or socks5
type=http
proxy=
timeout=10
retry=3

[Name_Rule]
location_rule=actor+'/'+'['+year+'] '+number
naming_rule=number+'-'+title

[update]
update_check=1

[priority]
website=javbus,javdb,fanza,xcity,mgstage,fc2,avsox,jav321,javlib

[escape]
literals=\()/
folders=failed,JAV_output

[debug_mode]
switch=0
</code></pre><p>在这个JAV文件夹路径下，<code>./AV_Data_Capture</code> 就开始移动整理视频文件了。最后整理好的文件会排放在JAV_output这个文件夹内，工具会生成这个文件夹的。</p>
<ul>
<li>（小技巧，一次整理的时候少放些，出错的时候好手动排查）</li>
</ul>
<h4 id="手动添加-jellyfin-javscraper-插件来获取jav封面之类的信息">手动添加 Jellyfin JavScraper 插件，来获取JAV封面之类的信息</h4>
<p><a href="https://github.com/JavScraper/Emby.Plugins.JavScraper/releases">https://github.com/JavScraper/Emby.Plugins.JavScraper/releases</a></p>
<p>下载，解压后得到 <code>JavScraper.dll</code> , 直接丢进 pve lxc debian jellyfin 的 <code>/var/lib/jellyfin/plugins</code></p>
<pre><code>chmod 644 /var/lib/jellyfin/plugins/JavScraper.dll
chown jellyfin:jellyfin /var/lib/jellyfin/plugins/JavScraper.dll
</code></pre><ul>
<li>(禁用JavScrapper自带的代理选项，通过自己的路由来科学上网，会获得更好的体验)</li>
</ul>
<h4 id="为-jellyfin-添加-jav-媒体库">为 Jellyfin 添加 JAV 媒体库</h4>
<p>内容类型 为 电影</p>
<p>Movie 元数据下载器 只需要 勾选 JavScraper
Movie 图片获取程序 也只需要勾选 JavScraper</p>
<p>然后就开始自动扫描装载媒体库了。</p>
<h2 id="配置jellyfin-https-访问-可选">配置Jellyfin https 访问 （可选）</h2>
<p><code>apt install nginx</code></p>
<pre><code>rm -rf /etc/nginx/nginx.conf
cat &lt;&lt; EOF &gt; /etc/nginx/nginx.conf
user  www-data www-data;
pid   /run/nginx.pid;

worker_processes auto;
worker_rlimit_nofile 100000;

events {
    worker_connections  100000;
    multi_accept on;
    use epoll;
}

http {
  include mime.types;
  default_type application/octet-stream;

  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 64 4k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;
  fastcgi_intercept_errors on;

  server_tokens             off;
  sendfile                  on;
  tcp_nodelay               on;
  tcp_nopush                on;
  keepalive_timeout         60;
  client_header_timeout     60;
  client_body_timeout       60;
  reset_timedout_connection on;
  types_hash_max_size       2048;

  gzip                      on;
  gzip_disable              &quot;MSIE [1-6]\.&quot;;
  gzip_vary                 on;
  gzip_proxied              any;
  gzip_comp_level           4;
  gzip_min_length           256;
  gzip_buffers              16 8k;
  gzip_http_version         1.0;
  gzip_types    text/plain
                text/javascript
                text/css
                text/js
                text/xml
                text/x-component
                text/x-json
                font/opentype
                application/x-font-ttf
                application/javascript
                application/x-javascript
                application/x-web-app-manifest+json
                application/json
                application/atom+xml
                application/xml
                application/xml+rss
                application/xhtml+xml
                application/vnd.ms-fontobject
                image/svg+xml
                image/x-icon;


  access_log off;
  error_log off;

  include /etc/nginx/conf.d/*.conf;
}
EOF
</code></pre><pre><code>rm -rf /etc/nginx/conf.d/default.conf
cat &lt;&lt; EOF &gt; /etc/nginx/conf.d/default.conf
server {
  listen 8097 ssl http2;
  server_name 域名;

  ssl_certificate /var/www/ssl/域名.cer;
  ssl_certificate_key /var/www/ssl/域名.key;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;
  ssl_ciphers TLS13+AESGCM+AES128:TLS13+AESGCM+AES256:TLS13+CHACHA20:EECDH+ECDSA+AESGCM+AES128:EECDH+ECDSA+CHACHA20:EECDH+ECDSA+AESGCM+AES256:EECDH+ECDSA+AES128+SHA:EECDH+ECDSA+AES256+SHA:EECDH+aRSA+AESGCM+AES128:EECDH+aRSA+CHACHA20:EECDH+aRSA+AESGCM+AES256:EECDH+aRSA+AES128+SHA:EECDH+aRSA+AES256+SHA:RSA+AES128+SHA:RSA+AES256+SHA:RSA+3DES;
  ssl_session_timeout 10m;
  ssl_session_cache builtin:1000 shared:SSL:10m;
  ssl_buffer_size 4k;

  add_header X-Frame-Options &quot;SAMEORIGIN&quot;;
  add_header Referrer-Policy &quot;no-referrer&quot; always;
  add_header X-Content-Type-Options &quot;nosniff&quot; always;
  add_header X-Download-Options &quot;noopen&quot; always;
  add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;
  add_header X-Permitted-Cross-Domain-Policies &quot;none&quot; always;
  add_header X-Robots-Tag &quot;none&quot; always;
  add_header X-XSS-Protection &quot;1; mode=block&quot; always;
  add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;

location / {
  proxy_pass                http://127.0.0.1:8096;
  proxy_set_header Host \$host;
  proxy_set_header X-Real-IP \$remote_addr;
  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto \$scheme;
  proxy_set_header X-Forwarded-Protocol \$scheme;
  proxy_set_header X-Forwarded-Host \$http_host;
  proxy_connect_timeout     432000;
  proxy_send_timeout        432000;
  proxy_read_timeout        432000;
  proxy_redirect            off;
  proxy_buffering           off;
  proxy_buffer_size         4k;
}
}
EOF
</code></pre><ul>
<li>应用上面命令前，替换好域名字样为真正自己使用的域名。</li>
<li>提前放好ssl证书文件，路径我习惯 <code>/var/www/ssl</code> 域名.cer 和 域名.key 两个文件。（证书文件，一般情况下是 600 ）</li>
<li>8096是jellyfin默认的web访问的端口。</li>
<li>8097是设置给nginx的https端口，平时通过 https://域名:8097 来访问jellyfin。</li>
</ul>
]]></content><category scheme="https://jacyl4.github.io/categories/linux/" term="linux" label="linux"/><category scheme="https://jacyl4.github.io/tags/pve/" term="pve" label="pve"/><category scheme="https://jacyl4.github.io/tags/lxc/" term="lxc" label="lxc"/><category scheme="https://jacyl4.github.io/tags/jellyfin/" term="jellyfin" label="jellyfin"/><category scheme="https://jacyl4.github.io/tags/scraper/" term="scraper" label="scraper"/></entry><entry><title type="text">justhost 俄罗斯VPS cn2</title><link rel="alternate" type="text/html" href="https://jacyl4.github.io/posts/vps-justhost/"/><id>https://jacyl4.github.io/posts/vps-justhost/</id><updated>2020-07-05T10:44:19+08:00</updated><published>2020-06-01T04:00:00+08:00</published><author><name>JacyL4</name><uri>https://seso.icu/</uri><email>jacyl4@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">AFF https://justhost.ru/?ref=1495 俄罗斯 justhost dataline, Moscow 机房 CPU：1核 内存：512mb 硬盘：5g 带宽：200mbps 流量：无限流量 线路：电信移动cn2直连 年付默认八折 月付八折优惠码 LET20 (若可用) 八折后 87卢布/月 paypal 相比 支付宝 汇率略低。 高可用</summary><content type="html"><![CDATA[<p>AFF</p>
<blockquote>
<p><a href="https://justhost.ru/?ref=1495">https://justhost.ru/?ref=1495</a></p>
</blockquote>
<p>俄罗斯 justhost</p>
<p>dataline, Moscow 机房</p>
<blockquote>
<p>CPU：1核 <br>
内存：512mb <br>
硬盘：5g</p>
<p>带宽：200mbps <br>
流量：无限流量 <br>
线路：电信移动cn2直连</p>
</blockquote>
<p>年付默认八折 <br>
月付八折优惠码 <code>LET20</code> (若可用)  <br>
八折后 87卢布/月 <br>
paypal 相比 支付宝 汇率略低。</p>
<p>高可用</p>
]]></content><category scheme="https://jacyl4.github.io/categories/vps/" term="VPS" label="VPS"/><category scheme="https://jacyl4.github.io/tags/cn2/" term="cn2" label="cn2"/></entry><entry><title type="text">给国外/国内虚拟机DD debian 系统</title><link rel="alternate" type="text/html" href="https://jacyl4.github.io/posts/dd_debian/"/><id>https://jacyl4.github.io/posts/dd_debian/</id><updated>2020-07-05T10:44:19+08:00</updated><published>2020-05-27T00:00:00+08:00</published><author><name>JacyL4</name><uri>https://seso.icu/</uri><email>jacyl4@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">查看虚拟机的ip跟其上级ip ip route show 把查到的ip填入最下面的dd命令里。 安装DD运行所需的依赖 当前系统为centos时 yum install -y xz openssl gawk file 当前系统为debian时 apt install -y xz-utils openssl gawk file DD命令 国内 bash &amp;lt;(wget --no-check-certificate -qO- http://moeclub.org/attachment/LinuxShell/InstallNET.sh | sed 's/8.8.8.8/119.29.29.29/') \ -d 9 -v amd64 -a \ -p password \ --mirror &amp;quot;http://mirrors.aliyun.com/debian/&amp;quot; \ --ip-addr 192.168.1.2 \ --ip-mask 255.255.255.0 \ --ip-gate 192.168.1.1 国……</summary><content type="html"><![CDATA[<h4 id="查看虚拟机的ip跟其上级ip">查看虚拟机的ip跟其上级ip</h4>
<p><code>ip route show</code> <br>
把查到的ip填入最下面的dd命令里。</p>
<h4 id="安装dd运行所需的依赖">安装DD运行所需的依赖</h4>
<p>当前系统为centos时
<code>yum install -y xz openssl gawk file</code></p>
<p>当前系统为debian时
<code>apt install -y xz-utils openssl gawk file</code></p>
<h4 id="dd命令">DD命令</h4>
<h5 id="国内">国内</h5>
<pre><code>bash &lt;(wget --no-check-certificate -qO- http://moeclub.org/attachment/LinuxShell/InstallNET.sh | sed 's/8.8.8.8/119.29.29.29/') \
-d 9 -v amd64 -a \
-p password \
--mirror &quot;http://mirrors.aliyun.com/debian/&quot; \
--ip-addr 192.168.1.2 \
--ip-mask 255.255.255.0 \
--ip-gate 192.168.1.1
</code></pre><h5 id="国外">国外</h5>
<pre><code>bash &lt;(wget --no-check-certificate -qO- http://moeclub.org/attachment/LinuxShell/InstallNET.sh | sed 's/8.8.8.8/1.1.1.1/') \
-d 9 -v amd64 -a \
-p password \
-apt &quot;http://deb.debian.org/debian/&quot; \
--ip-addr 10.0.0.2 \
--ip-mask 255.255.255.0 \
--ip-gate 10.0.0.1
</code></pre><ul>
<li>9 就是debian9</li>
<li>password 就是密码</li>
</ul>
]]></content><category scheme="https://jacyl4.github.io/categories/linux/" term="linux" label="linux"/><category scheme="https://jacyl4.github.io/tags/debian/" term="debian" label="debian"/><category scheme="https://jacyl4.github.io/tags/dd/" term="DD" label="DD"/></entry><entry><title type="text">终端内用于查看网络情况的指令</title><link rel="alternate" type="text/html" href="https://jacyl4.github.io/posts/shell_net_test/"/><id>https://jacyl4.github.io/posts/shell_net_test/</id><updated>2020-07-05T10:44:19+08:00</updated><published>2020-05-09T00:00:00+08:00</published><author><name>JacyL4</name><uri>https://seso.icu/</uri><email>jacyl4@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html"><![CDATA[列出适配器名称 ifconfig | grep -E -o &quot;^[a-z0-9]+&quot; | grep -v &quot;lo&quot; | uniq 查看端口占用 netstat -anp|grep 5390 或 lsof -i:5390 查看进程pid ps -ef | grep nginx 根据pid查看端口占用 netstat -nap | grep 10191 查看连接数 netstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,&quot;t&quot;,state[key]}' 查看tcpfastopen grep '^TcpExt:' /proc/net/netstat | cut -d ' ' -f 87-92 | column -t 入口流量信息统计GB (ens18) echo &quot;$(awk -v eth=ens18 -F'[: ]+' '{if……]]></summary><content type="html"><![CDATA[<h4 id="列出适配器名称">列出适配器名称</h4>
<p><code>ifconfig | grep -E -o &quot;^[a-z0-9]+&quot; | grep -v &quot;lo&quot; | uniq</code></p>
<h4 id="查看端口占用">查看端口占用</h4>
<p><code>netstat -anp|grep 5390</code></p>
<p>或</p>
<p><code>lsof -i:5390</code></p>
<h4 id="查看进程pid">查看进程pid</h4>
<p><code>ps -ef | grep nginx</code></p>
<h4 id="根据pid查看端口占用">根据pid查看端口占用</h4>
<p><code>netstat -nap | grep 10191</code></p>
<h4 id="查看连接数">查看连接数</h4>
<p><code>netstat -n | awk '/^tcp/ {++state[$NF]} END {for(key in state) print key,&quot;t&quot;,state[key]}'</code></p>
<h4 id="查看tcpfastopen">查看tcpfastopen</h4>
<p><code>grep '^TcpExt:' /proc/net/netstat | cut -d ' ' -f 87-92 | column -t</code></p>
<h4 id="入口流量信息统计gb-ens18">入口流量信息统计GB (ens18)</h4>
<p><code>echo &quot;$(awk -v eth=ens18 -F'[: ]+' '{if ($0 ~eth){print $3,$11}}' /proc/net/dev | awk '{print $1}') /1024 /1024 /1024&quot; | bc</code></p>
<h4 id="出口流量信息统计gb-ens18">出口流量信息统计GB (ens18)</h4>
<p><code>echo &quot;$(awk -v eth=ens18 -F'[: ]+' '{if ($0 ~eth){print $3,$11}}' /proc/net/dev | awk '{print $2}') /1024 /1024 /1024&quot; | bc</code></p>
]]></content><category scheme="https://jacyl4.github.io/categories/linux/" term="linux" label="linux"/><category scheme="https://jacyl4.github.io/tags/debian/" term="debian" label="debian"/><category scheme="https://jacyl4.github.io/tags/shell/" term="shell" label="shell"/></entry><entry><title type="text">RouterOS电信移动聚合实例</title><link rel="alternate" type="text/html" href="https://jacyl4.github.io/posts/ros_ct_cmcc/"/><id>https://jacyl4.github.io/posts/ros_ct_cmcc/</id><updated>2020-07-05T10:44:19+08:00</updated><published>2020-04-22T00:00:00+08:00</published><author><name>JacyL4</name><uri>https://seso.icu/</uri><email>jacyl4@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">实例宽带接入： 电信（双拨） 移动 一，建立vrrp用于拨号 提前摸清ros里的网口顺序，实例中，电信插eth1口，移动插eth2口，桥接接口名为bridge1，给bridge1分配个ip，比如10.0.0.2，就是ros地址。 /interface vrrp add name=vrrp1 interface=eth1 vrid=1 /interface vrrp add name=vrrp2……</summary><content type="html"><![CDATA[<p>实例宽带接入：</p>
<p>电信（双拨）</p>
<p>移动</p>
<h1 id="一建立vrrp用于拨号">一，建立vrrp用于拨号</h1>
<p>提前摸清ros里的网口顺序，实例中，电信插eth1口，移动插eth2口，桥接接口名为bridge1，给bridge1分配个ip，比如10.0.0.2，就是ros地址。</p>
<pre><code>/interface vrrp add name=vrrp1 interface=eth1 vrid=1
/interface vrrp add name=vrrp2 interface=eth1 vrid=2
/interface vrrp add name=vrrp4 interface=eth2 vrid=3
</code></pre><p>给端口们预先分配好ip，随自己的习惯分配好了，因为vrrp需要预设好ip才会显示已连接</p>
<pre><code>/ip address add address=192.168.10.1/24 interface=eth1
/ip address add address=192.168.20.1/24 interface=eth2
/ip address add address=192.168.10.11/24 interface=vrrp1
/ip address add address=192.168.10.12/24 interface=vrrp2
/ip address add address=192.168.20.11/24 interface=vrrp3
</code></pre><h1 id="二建立pppoe拨号">二，建立pppoe拨号</h1>
<pre><code>/interface pppoe-client add name=pppoe-CT1 max-mtu=1480 max-mru=1480 interface=vrrp1 user=宽带帐号 password=宽带密码 add-default-route=no disable=no
/interface pppoe-client add name=pppoe-CT2 max-mtu=1480 max-mru=1480 interface=vrrp2 user=宽带帐号 password=宽带密码 add-default-route=no disable=no
/interface pppoe-client add name=pppoe-CMCC1 max-mtu=1480 max-mru=1480 interface=vrrp3 user=宽带帐号 password=宽带密码 add-default-route=no disable=no
</code></pre><h1 id="三防火墙基础防护">三，防火墙基础防护</h1>
<p>下面第五行&quot;src-address=10.0.0.0/24&quot;，这个是我内网的网段，表示该ip段可以连入ros，进行设置。根据自己情况改。</p>
<pre><code>/ip firewall filter
add chain=input connection-state=invalid action=drop comment=&quot;Drop Invalid connections&quot;  
add chain=input connection-state=established action=accept comment=&quot;Allow Established connections&quot;  
add chain=input protocol=icmp action=accept comment=&quot;Allow ICMP&quot;  
add chain=input src-address=10.0.0.0/24 action=accept in-interface=bridge1
add chain=input action=drop comment=&quot;Drop everything else&quot;

add chain=output action=accept comment=&quot;accept everything&quot;

add chain=forward connection-state=invalid action=drop comment=&quot;Drop Invalid connections&quot;
add chain=forward connection-state=established action=accept comment=&quot;Allow Established connections&quot;
add chain=forward connection-state=related action=accept comment=&quot;allow related connections&quot;

add chain=forward protocol=tcp action=jump jump-target=tcp
add chain=forward protocol=udp action=jump jump-target=udp
add chain=forward protocol=icmp action=jump jump-target=icmp

add chain=input protocol=tcp psd=21,3s,3,1 action=drop comment=&quot;Port scanners&quot;
add chain=input protocol=tcp tcp-flags=fin,!syn,!rst,!psh,!ack,!urg action=drop comment=&quot;NMAP FIN Stealth scan&quot;
add chain=input protocol=tcp tcp-flags=fin,syn action=drop comment=&quot;SYN/FIN scan&quot;
add chain=input protocol=tcp tcp-flags=syn,rst action=drop comment=&quot;SYN/RST scan&quot;
add chain=input protocol=tcp tcp-flags=fin,psh,urg,!syn,!rst,!ack action=drop comment=&quot;FIN/PSH/URG scan&quot;
add chain=input protocol=tcp tcp-flags=fin,syn,rst,psh,ack,urg action=drop comment=&quot;ALL/ALL scan&quot;
add chain=input protocol=tcp tcp-flags=!fin,!syn,!rst,!psh,!ack,!urg action=drop comment=&quot;NMAP NULL scan&quot;
</code></pre><h1 id="四建立nat伪装与端口映射">四，建立nat伪装与端口映射</h1>
<pre><code>/ip firewall nat
add chain=srcnat out-interface=pppoe-CT1 action=masquerade
add chain=srcnat out-interface=pppoe-CT2 action=masquerade
add chain=srcnat out-interface=pppoe-CMCC1 action=masquerade

add chain=dstnat protocol=tcp dst-port=1-65535 in-interface=pppoe-CT1 action=dst-nat to-addresses=10.0.0.5 to-ports=1-65535
</code></pre><h1 id="五pcc宽带聚合">五，PCC宽带聚合</h1>
<h2 id="0导入国内运营商ip段">0，导入国内运营商ip段</h2>
<p>下载文件 <a href="https://raw.githubusercontent.com/jacyl4/ros-pbr-CT-CMCC/master/ros-dpbr-CT-CMCC.rsc">ros-dpbr-CT-CMCC.rsc</a></p>
<p>导入winbox的Files里</p>
<p>运行如下，把ip段导入ros firewall的address lists里，供下面标记时使用。（防止重复导入，前两行是删除现有的电信段与移动段）</p>
<pre><code>/ip firewall address-list remove [find list=&quot;dpbr-CT&quot;]
/ip firewall address-list remove [find list=&quot;dpbr-CMCC&quot;]
/import ros-dpbr-CT-CMCC.rsc
</code></pre><h2 id="1排除内网通讯">1，排除内网通讯</h2>
<pre><code>/ip firewall address-list
add address=10.0.0.0/24 list=local comment=local

/ip firewall mangle
add chain=prerouting src-address-list=local dst-address-list=local action=accept comment=&quot;local&quot;
</code></pre><h2 id="2源进标记">2，源进标记</h2>
<pre><code>/ip firewall mangle
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CT1 src-address-list=dpbr-CT action=mark-connection new-connection-mark=CT_conn1 passthrough=yes comment=in
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CT2 src-address-list=dpbr-CT action=mark-connection new-connection-mark=CT_conn2 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CMCC1 src-address-list=dpbr-CMCC action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CT1 action=mark-connection new-connection-mark=CT_conn1 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CT2 action=mark-connection new-connection-mark=CT_conn2 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=pppoe-CMCC1 action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
</code></pre><h2 id="3v2线路标记可选">3，v2线路标记（可选）</h2>
<p>示例：</p>
<p>111.111.111.111是搬瓦工vps ip，注释名称bwg，走电信线路</p>
<p>222.222.222.222是CloudCone vps ip，注释名称cc，走移动线路</p>
<pre><code>/ip firewall address-list
add address=111.111.111.111 list=CTv2 comment=bwg
add address=222.222.222.222 list=CMv2 comment=cc
</code></pre><pre><code>/ip firewall mangle
add chain=prerouting connection-mark=no-mark in-interface=bridge1 dst-address-list=CTv2 action=mark-connection new-connection-mark=CT_conn1 passthrough=yes comment=v2
add chain=prerouting connection-mark=no-mark in-interface=bridge1 dst-address-list=CMv2 action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
</code></pre><h2 id="4pcc标记">4，PCC标记</h2>
<p>先做国内不同运营商指定出口，因为电信双拨，双拨的还得PCC聚合下，至于叠不叠带宽，各地随缘了。移动就单拨就直接标记一下就行了。</p>
<pre><code>/ip firewall mangle
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses-and-ports:2/0 dst-address-list=dpbr-CT action=mark-connection new-connection-mark=CT_conn1 passthrough=yes comment=&quot;PCC spec&quot;
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses-and-ports:2/1 dst-address-list=dpbr-CT action=mark-connection new-connection-mark=CT_conn1 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=bridge1 dst-address-list=dpbr-CMCC action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
</code></pre><p>ros防火墙规则自上而下顺序匹配，上面没匹配到的，就接下来整体聚合。</p>
<pre><code>/ip firewall mangle
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses-and-ports:3/0 dst-address-type=!local action=mark-connection new-connection-mark=CT_conn1 passthrough=yes comment=PCC
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses-and-ports:3/1 dst-address-type=!local action=mark-connection new-connection-mark=CT_conn2 passthrough=yes
add chain=prerouting connection-mark=no-mark in-interface=bridge1 per-connection-classifier=both-addresses-and-ports:3/2 dst-address-type=!local action=mark-connection new-connection-mark=CMCC_conn1 passthrough=yes
</code></pre><h2 id="5让数据根据上面线路标记选择路由">5，让数据根据上面线路标记选择路由</h2>
<pre><code>/ip firewall mangle
add chain=prerouting connection-mark=CT_conn1 in-interface=bridge1 action=mark-routing new-routing-mark=CT1 passthrough=yes comment=&quot;dynamic pbr&quot;
add chain=prerouting connection-mark=CT_conn2 in-interface=bridge1 action=mark-routing new-routing-mark=CT2 passthrough=yes
add chain=prerouting connection-mark=CMCC_conn1 in-interface=bridge1 action=mark-routing new-routing-mark=CMCC1 passthrough=yes

add chain=output connection-mark=CT_conn1 action=mark-routing new-routing-mark=CT1 passthrough=yes comment=out
add chain=output connection-mark=CT_conn2 action=mark-routing new-routing-mark=CT2 passthrough=yes
add chain=output connection-mark=CMCC_conn1 action=mark-routing new-routing-mark=CMCC1 passthrough=yes
</code></pre><h1 id="六设置路由">六，设置路由</h1>
<pre><code>/ip route
add dst-address=0.0.0.0/0 gateway=pppoe-CT1 check-gateway=ping distance=1
add dst-address=0.0.0.0/0 gateway=pppoe-CT2 check-gateway=ping distance=2
add dst-address=0.0.0.0/0 gateway=pppoe-CMCC1 check-gateway=ping distance=2
add dst-address=0.0.0.0/0 gateway=pppoe-CT1 check-gateway=ping distance=1 routing-mark=CT1
add dst-address=0.0.0.0/0 gateway=pppoe-CT2 check-gateway=ping distance=1 routing-mark=CT2
add dst-address=0.0.0.0/0 gateway=pppoe-CMCC1 check-gateway=ping distance=1 routing-mark=CMCC1
</code></pre><h1 id="乖巧--v-thx">乖巧 ☆⌒(*＾-゜)v THX!!</h1>
<img src="https://i.loli.net/2020/04/22/EaMjS1J8yfrVv4N.png" width="260" alt="给个赏吧">
]]></content><category scheme="https://jacyl4.github.io/categories/%E8%B7%AF%E7%94%B1/" term="路由" label="路由"/><category scheme="https://jacyl4.github.io/tags/ros/" term="ros" label="ros"/><category scheme="https://jacyl4.github.io/tags/%E5%88%86%E6%B5%81/" term="分流" label="分流"/></entry><entry><title type="text">de_GWD</title><link rel="alternate" type="text/html" href="https://jacyl4.github.io/posts/de_gwd/"/><id>https://jacyl4.github.io/posts/de_gwd/</id><updated>2020-07-05T10:44:19+08:00</updated><published>2019-03-26T00:00:00+08:00</published><author><name>JacyL4</name><uri>https://seso.icu/</uri><email>jacyl4@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">Github de_GWD(Debian bypass Gateway &amp;amp; DNS)专注旁路，运行于debian的一个完善套件，带界面，纯粹是为了追求更高效更极速。 DNS去污染方式有别于以往各种，效率不是以往LEDE/梅林等兼容方案能比拟的。 双端配合，其于linux debian，特调tcp参数，可以从内核……</summary><content type="html"><![CDATA[<p><a href="https://github.com/jacyl4/de_GWD">Github</a></p>
<p>de_GWD(Debian bypass Gateway &amp; DNS)专注旁路，运行于debian的一个完善套件，带界面，纯粹是为了追求更高效更极速。</p>
<p>DNS去污染方式有别于以往各种，效率不是以往LEDE/梅林等兼容方案能比拟的。</p>
<p>双端配合，其于linux debian，特调tcp参数，可以从内核层面，略微提升连接性能。</p>
<p>需要64位，支持普通amd64平台 以及 树莓派，香橙派 等 arm64 平台。</p>
<p><img src="https://i.loli.net/2020/07/05/Ba6YSGbXEcVAKLO.png" alt="de_gwd">
只有一个doh地址的时候，doh1跟doh2填同一个地址。不要留空。</p>
<h1 id="部署">部署</h1>
<p>提前给自己的vps kvm 小机 准备好域名。哪怕是免费的只要能给cloudflare托管就行。二级域名不行。 脚本开始安装的时候，要制作证书的。</p>
<p><img src="https://i.loli.net/2019/04/04/5ca5beea00c91.png" alt="dns record"></p>
<h2 id="服务端">服务端</h2>
<p><img src="https://i.loli.net/2020/06/10/qWVbimIha9s1UeJ.png" alt="server"></p>
<p>提前准备好域名，做好a记录。</p>
<p>脚本结束会自动打印出doh，域名，uuid，path等信息。/ 或者用选项11来复查</p>
<p>服务端默认有自动更新功能，间歇查询github上的版本号，与本地比对，不一致后会自动生成计划任务，+8 凌晨4点30开始自动更新（pihole组件除外）</p>
<p>nginx配置方面，如需要vps上同时运行wordpress nextcloud等程序。</p>
<p>/etc/nginx/conf.d</p>
<p>supp_head 用于存放nginx upstream模块的内容</p>
<p>supp_body 用于存放wordpress nextcloud等程序的伪静态内容</p>
<p>然后，平常更新时就可以共存了。</p>
<p>附：
<a href="https://www.uuidgenerator.net/">在线生成UUID</a></p>
<h2 id="客户端">客户端</h2>
<p>General Edition (amd64)
<img src="https://i.loli.net/2020/06/10/F1mkOphUEBTgxVr.png" alt="client_do"></p>
<p>Compatible Edition (amd64&amp;arm64)
<img src="https://i.loli.net/2020/06/10/iJ2vKInt8VNBWYz.png" alt="client"></p>
<p>需要以root用户安装</p>
<p>通常用第一个脚本，如果是armbian平台的话，才选第二个脚本。如果x86 cpu比较落后，不能运行docker，那也只能选第二个版本。</p>
<p>首次安装前，先维持上级路由的dhcp是普通状态，确保debian能正常获取ip联网。</p>
<p>直接联网安装，不需要挂代理。</p>
<p>选项2，可以用来强制重置pihole密码。</p>
<p>装完后，关闭上级路由的DHCP服务，在web UI上开启de_GWD的DHCP服务。</p>
<p>有公网ip的话，可以选项3安装wireguard组件。</p>
<p>wireguard组件，在每次debian内核更新后，需要重新编译安装。</p>
<ul>
<li>
<p>自动每二小时校时</p>
</li>
<li>
<p>自动每天凌晨更新分流规则</p>
</li>
<li>
<p>组件通过install按钮安装后，刷新页面显示选型</p>
<ul>
<li>frp
<ul>
<li>
<p>可以用于映射一个内网的服务端口，也可以用于内网穿透转接wireguard</p>
</li>
<li>
<p>需要大陆服务器，或者nat机，提前确认好服务端端口</p>
</li>
<li>
<p>Bind-Port即de_GWD 到 大陆服务器 之前建立连接进行内网穿透的端口</p>
</li>
<li>
<p>Bind-Port，服务器端口，本地端口，可以为同一个，但是确认好tcp或udp</p>
</li>
<li>
<p>生成的安装指令，可以在大陆服务器上直接快速安装与本地相匹配的frp服务端</p>
</li>
<li>
<p>转接wireguard时，wireguard的endpoint域名与端口，直接填frp的服务器域名与服务器端口</p>
</li>
<li>
<p>kcp与wireguard皆为udp</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>更多疑问</p>
<p><a href="https://t.me/de_GWD"><img src="https://cdn.rawgit.com/Patrolavia/telegram-badge/8fe3382b/chat.svg" alt="Telegram"></a></p>
]]></content><category scheme="https://jacyl4.github.io/categories/%E8%B7%AF%E7%94%B1/" term="路由" label="路由"/><category scheme="https://jacyl4.github.io/tags/de_gwd/" term="de_GWD" label="de_GWD"/><category scheme="https://jacyl4.github.io/tags/%E6%97%81%E8%B7%AF/" term="旁路" label="旁路"/></entry></feed>